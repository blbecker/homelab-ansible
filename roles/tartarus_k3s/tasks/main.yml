---
# tasks file for tartarus.k3s
- name: Include vars
  ansible.builtin.include_vars: main.yml

- name: Include secrets
  ansible.builtin.include_vars: secrets.yml
  no_log: true

- name: "Ansible | Print multiple variable"
  debug:
    msg: |
      The color is {{ k8sColor }}

- name: Configure fs.inotify.max_queued_events
  ansible.posix.sysctl:
    name: fs.inotify.max_queued_events
    value: "16384"
    sysctl_set: true

- name: Configure fs.inotify.max_user_watches
  ansible.posix.sysctl:
    name: fs.inotify.max_user_watches
    value: "65536"
    sysctl_set: true

- name: Configure fs.inotify.max_user_instances
  ansible.posix.sysctl:
    name: fs.inotify.max_user_instances
    value: "512"
    sysctl_set: true

- name: Configure ulimits
  ansible.builtin.template:
    src: my-limits.conf.j2
    dest: /etc/security/limits.d/my-limits.conf
    owner: root
    group: root
    mode: "0644"

- name: Make config directory
  ansible.builtin.file:
    path: "/etc/rancher/k3s"
    mode: "0755"
    state: directory

- name: Copy config values
  ansible.builtin.template:
    src: k3s-config.yaml.j2
    dest: "/etc/rancher/k3s/config.yaml"
    mode: "0644"
  notify:
    - Restart k3s agent
    - Restart k3s server

- name: Download K3s install script
  ansible.builtin.get_url:
    url: https://get.k3s.io/
    timeout: 120
    dest: /usr/local/bin/k3s-install.sh
    owner: root
    group: root
    mode: "0755"

- name: Download K3s binary (server)
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-install.sh
  environment:
    INSTALL_K3S_SKIP_START: "true"
    K3S_TOKEN: "{{ k3s_token }}"
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  when: k3s_role == 'server'

- name: Download K3s binary (agent)
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-install.sh agent
  environment:
    INSTALL_K3S_SKIP_START: "true"
    K3S_TOKEN: "{{ k3s_token }}"
    K3S_URL: "https://k8s.tartarus.us:6443"
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  when: k3s_role == 'agent'

- name: Install longhorn dependencies
  ansible.builtin.apt:
    pkg:
      - open-iscsi
      - bash
      - curl
      - grep
      - util-linux
    state: present
    update_cache: true

- name: Install k3s dependencies
  ansible.builtin.apt:
    pkg:
      - wireguard
    state: present
    update_cache: true

- name: Install nfs-subdir dependencies
  ansible.builtin.apt:
    pkg:
      - nfs-common
    state: present
    update_cache: true

- name: Start and enable iscsi
  ansible.builtin.service:
    name: iscsid
    state: started
    enabled: true

- name: Create a datadir for longhorn
  ansible.builtin.file:
    path: /mnt/longhorn
    state: directory
    owner: root
    group: root
    mode: "0644"

- name: Create a destination for the k3s override file
  ansible.builtin.file:
    path: /etc/systemd/system/k3s.service.d
    state: directory
    owner: root
    group: root
    mode: "0644"

- name: Override the k3s unit file to set limits
  ansible.builtin.template:
    src: k3s-override.conf.j2
    dest: /etc/systemd/system/k3s.service.d/override.conf
    owner: root
    group: root
    mode: "0644"
  notify:
    - Restart k3s agent
    - Restart k3s server

- name: Start and enable k3s (server)
  ansible.builtin.systemd:
    name: k3s
    state: started
    enabled: true
    daemon-reload: true
  when: k3s_role == 'server'

- name: Start and enable k3s (agent)
  ansible.builtin.systemd:
    name: k3s-agent
    state: started
    enabled: true
    daemon-reload: true
  when: k3s_role == 'agent'

- name: Add A records for k8s controllers
  community.general.cloudflare_dns:
    domain: tartarus.us
    record: k8s
    type: A
    value: "{{ ansible_default_ipv4.address }}"
    comment: "Created by Ansible"
    api_token: "{{ cloudflare_token }}"
    state: present
  when: k3s_role == 'server'

- name: Remove cname records for non-k8s controllers
  community.general.cloudflare_dns:
    domain: tartarus.us
    record: k8s
    type: A
    value: "{{ ansible_default_ipv4.address }}"
    comment: "Created by Ansible"
    api_token: "{{ cloudflare_token }}"
    state: absent
  when: k3s_role != 'server'
